{"ast":null,"code":"var _jsxFileName = \"/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js\";\nimport React, { useState, useEffect } from 'react';\nimport DriverMarker from \"./DriverMarker\";\nimport RideMarker from \"./RideMarker\";\nimport DriverForm from \"./DriverForm\";\nimport RideForm from \"./RideForm\";\nimport GoogleMapReact from 'google-map-react';\n\nconst SimpleMap = props => {\n  //setting state\n  const [centerC, setCenter] = useState({\n    lat: 37.4275,\n    lng: -122.1697\n  });\n  const [zoom, setZoom] = useState(11);\n  const [driverAddress, setDriverAddress] = useState([{}]);\n  const [rideAddress, setRideAddress] = useState([{}]);\n\n  const getMapOptions = () => {\n    return {\n      disableDefaultUI: true,\n      mapTypeControl: true,\n      streetViewControl: true,\n      styles: [{\n        featureType: 'poi',\n        elementType: 'labels',\n        stylers: [{\n          visibility: 'on'\n        }]\n      }]\n    };\n  }; //Pull in addresses from home and transfer into coordinates\n\n\n  useEffect(() => {\n    pullInData();\n  }, []);\n\n  const pullInData = () => {\n    if (props.driverAddress.length > 0) {\n      props.driverAddress.forEach(address => {\n        console.log(\"address\", address);\n        pullData();\n\n        const pullData = async () => {\n          let res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${address},+CA&key=AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y`);\n          let json = await res.json();\n          let place = json.results[0].geometry.location;\n          console.log(\"place\", place);\n          setDriverAddress([...driverAddress, {\n            lat: place.lat,\n            lng: place.lng\n          }]);\n        };\n      });\n    }\n  };\n\n  const setDriverCoordinates = (later, longer) => {\n    console.log(\"coordinates\", later, longer);\n    setCenter({\n      lat: later,\n      lng: longer\n    }); // setLat(later)\n    // setLng(longer)\n\n    setDriverAddress([...driverAddress, {\n      lat: later,\n      lng: longer\n    }]);\n    console.log(\"Driver Address\", driverAddress);\n  };\n\n  const setCoordinates = (later, longer) => {\n    console.log(\"coordinates\", later, longer);\n    setCenter({\n      lat: later,\n      lng: longer\n    });\n    setRideAddress([...rideAddress, {\n      lat: later,\n      lng: longer\n    }]);\n    console.log(\"Ride Address\", rideAddress);\n  };\n\n  const createDriverMarkers = driverAddress.map((object, index) => {\n    if (Object.keys(object).length === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    } else {\n      return /*#__PURE__*/React.createElement(DriverMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      });\n    }\n  });\n  const createRideMarkers = rideAddress.map((object, index) => {\n    if (Object.keys(object).length === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    } else {\n      return /*#__PURE__*/React.createElement(RideMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    style: {\n      height: '90vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DriverForm, {\n    coordinates: setDriverCoordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RideForm, {\n    coordinates: setCoordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y'\n    },\n    center: centerC,\n    defaultZoom: zoom //   options = {getMapOptions}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, createDriverMarkers, createRideMarkers));\n};\n\nexport default SimpleMap;","map":{"version":3,"sources":["/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js"],"names":["React","useState","useEffect","DriverMarker","RideMarker","DriverForm","RideForm","GoogleMapReact","SimpleMap","props","centerC","setCenter","lat","lng","zoom","setZoom","driverAddress","setDriverAddress","rideAddress","setRideAddress","getMapOptions","disableDefaultUI","mapTypeControl","streetViewControl","styles","featureType","elementType","stylers","visibility","pullInData","length","forEach","address","console","log","pullData","res","fetch","json","place","results","geometry","location","setDriverCoordinates","later","longer","setCoordinates","createDriverMarkers","map","object","index","Object","keys","createRideMarkers","height","width","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DriverMarker from \"./DriverMarker\"\nimport RideMarker from \"./RideMarker\"\nimport DriverForm from \"./DriverForm\"\nimport RideForm from \"./RideForm\"\nimport GoogleMapReact from 'google-map-react';\n\n\nconst SimpleMap = (props) => {\n    //setting state\n    const [centerC, setCenter] = useState({lat: 37.4275, lng: -122.1697});\n    const [zoom, setZoom] = useState(11);\n    const [driverAddress, setDriverAddress] = useState([{}])\n    const [rideAddress, setRideAddress] = useState([{}])\n\n    const getMapOptions = () => {\n      return {\n        disableDefaultUI: true,\n        mapTypeControl: true,\n        streetViewControl: true,\n        styles: [{ featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'on' }] }],\n      };\n    };\n     \n    //Pull in addresses from home and transfer into coordinates\n    useEffect(()=> {\n        pullInData()\n    }, [])\n    \n    const pullInData = () => {\n        if(props.driverAddress.length > 0){\n            props.driverAddress.forEach((address)=> {\n                console.log(\"address\", address)\n                pullData()\n                const pullData = async() => {\n                let res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${address},+CA&key=AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y`)\n                let json = await res.json();\n                let place = json.results[0].geometry.location\n                console.log(\"place\", place)\n                setDriverAddress([...driverAddress, {lat: place.lat, lng: place.lng}]) \n                }\n            })\n        }\n    }\n\n\n\n    \n    const setDriverCoordinates = (later , longer)=>{\n        console.log(\"coordinates\", later, longer)\n        setCenter({lat: later, lng: longer})\n        // setLat(later)\n        // setLng(longer)\n        setDriverAddress([...driverAddress, {lat: later, lng: longer}])\n        console.log(\"Driver Address\", driverAddress)\n      } \n    const setCoordinates = (later , longer)=>{\n        console.log(\"coordinates\", later, longer)\n        setCenter({lat: later, lng: longer})\n        setRideAddress([...rideAddress, {lat: later, lng: longer}])\n        console.log(\"Ride Address\", rideAddress)\n      }\n\n    const createDriverMarkers = driverAddress.map((object, index)=>{\n        if (Object.keys(object).length === 0){\n         return (\n             <>\n\n             </>\n\n         )\n        } else {\n        return (\n            <DriverMarker lat={object.lat} lng={object.lng} key={index}/>\n        )\n        }\n    })  \n    const createRideMarkers = rideAddress.map((object, index)=>{\n        if (Object.keys(object).length === 0){\n         return (\n             <>\n             </>\n         )\n        } else {\n        return (\n            <RideMarker lat={object.lat} lng={object.lng} key={index}/>\n        )\n        }\n    }) \n    return (\n        <div id=\"map\" style={{ height: '90vh', width: '100%' }}>\n        <DriverForm coordinates={setDriverCoordinates}/>\n        <RideForm coordinates={setCoordinates} />\n        {/* <img src=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\" style={{ height: `90vh`, width: '100%' }}></img> */}\n        <GoogleMapReact\n          bootstrapURLKeys={{ key:'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y' }}\n          center= {centerC}\n          defaultZoom={zoom}\n        //   options = {getMapOptions}\n        > \n            {createDriverMarkers}\n            {createRideMarkers}\n        </GoogleMapReact>\n        </div>\n    );\n}\n\n    export default SimpleMap"]},"metadata":{},"sourceType":"module"}