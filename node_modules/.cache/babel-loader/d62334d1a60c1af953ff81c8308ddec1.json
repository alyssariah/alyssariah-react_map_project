{"ast":null,"code":"var _jsxFileName = \"/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js\";\nimport React, { useState } from 'react';\nimport DriverMarker from \"./DriverMarker\";\nimport RideMarker from \"./RideMarker\";\nimport DriverForm from \"./DriverForm\";\nimport RideForm from \"./RideForm\";\nimport GoogleMapReact from 'google-map-react';\n\nconst SimpleMap = props => {\n  //setting state\n  const [centerC, setCenter] = useState({\n    lat: 37.4275,\n    lng: -122.1697\n  });\n  const [zoom, setZoom] = useState(11);\n  const [driverAddress, setDriverAddress] = useState([]);\n  const [rideAddress, setRideAddress] = useState([{}]);\n  const [displayNames, setDisplayNames] = useState(false);\n\n  const getMapOptions = () => {\n    return {\n      disableDefaultUI: true,\n      mapTypeControl: true,\n      streetViewControl: true,\n      styles: [{\n        featureType: 'poi',\n        elementType: 'labels',\n        stylers: [{\n          visibility: 'on'\n        }]\n      }]\n    };\n  }; //make showAllDrivers div and function\n\n\n  const assignPass = name => {\n    setDisplayNames(!displayNames);\n  };\n\n  const showAllDrivers = props.driverList.map((object, index) => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }\n    }, object.name));\n  }); //Pull in addresses from home and transfer into coordinates\n\n  const pullDriverData = props.driverCoordinates.map((object, index) => {\n    if (props.driverCoordinates.length > 0) {\n      return /*#__PURE__*/React.createElement(DriverMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        driverList: props.driverList[index],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 18\n        }\n      });\n    }\n  });\n  const pullRideData = props.rideCoordinates.map((object, index) => {\n    if (props.rideCoordinates.length > 0) {\n      return /*#__PURE__*/React.createElement(RideMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        rideList: props.rideList[index],\n        assignPass: assignPass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      });\n    }\n  }); //setting coordinates\n\n  const setDriverCoordinates = (later, longer) => {\n    console.log(\"coordinates\", later, longer);\n    setCenter({\n      lat: later,\n      lng: longer\n    });\n    setDriverAddress([...driverAddress, {\n      lat: later,\n      lng: longer\n    }]);\n  };\n\n  const setCoordinates = (later, longer) => {\n    console.log(\"coordinates\", later, longer);\n    setCenter({\n      lat: later,\n      lng: longer\n    });\n    setRideAddress([...rideAddress, {\n      lat: later,\n      lng: longer\n    }]);\n    console.log(\"Ride Address\", rideAddress);\n  };\n\n  const createDriverMarkers = driverAddress.map((object, index) => {\n    if (Object.keys(object).length === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    } else {\n      return /*#__PURE__*/React.createElement(DriverMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      });\n    }\n  });\n  const createRideMarkers = rideAddress.map((object, index) => {\n    if (Object.keys(object).length === 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    } else {\n      return /*#__PURE__*/React.createElement(RideMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, displayNames && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"passengerList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, showAllDrivers)), /*#__PURE__*/React.createElement(DriverForm, {\n    coordinates: setDriverCoordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(RideForm, {\n    coordinates: setCoordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y'\n    },\n    center: centerC,\n    defaultZoom: zoom //   options = {getMapOptions}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, pullDriverData, pullRideData, createDriverMarkers, createRideMarkers));\n};\n\nexport default SimpleMap;","map":{"version":3,"sources":["/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js"],"names":["React","useState","DriverMarker","RideMarker","DriverForm","RideForm","GoogleMapReact","SimpleMap","props","centerC","setCenter","lat","lng","zoom","setZoom","driverAddress","setDriverAddress","rideAddress","setRideAddress","displayNames","setDisplayNames","getMapOptions","disableDefaultUI","mapTypeControl","streetViewControl","styles","featureType","elementType","stylers","visibility","assignPass","name","showAllDrivers","driverList","map","object","index","pullDriverData","driverCoordinates","length","pullRideData","rideCoordinates","rideList","setDriverCoordinates","later","longer","console","log","setCoordinates","createDriverMarkers","Object","keys","createRideMarkers","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB;AACA,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBT,QAAQ,CAAC;AAACU,IAAAA,GAAG,EAAE,OAAN;AAAeC,IAAAA,GAAG,EAAE,CAAC;AAArB,GAAD,CAArC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA9C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,KAAD,CAAhD;;AAGA,QAAMoB,aAAa,GAAG,MAAM;AAC1B,WAAO;AACLC,MAAAA,gBAAgB,EAAE,IADb;AAELC,MAAAA,cAAc,EAAE,IAFX;AAGLC,MAAAA,iBAAiB,EAAE,IAHd;AAILC,MAAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA,WAAW,EAAE,KAAf;AAAsBC,QAAAA,WAAW,EAAE,QAAnC;AAA6CC,QAAAA,OAAO,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAD;AAAtD,OAAD;AAJH,KAAP;AAMD,GAPD,CATyB,CAkBxB;;;AACA,QAAMC,UAAU,GAAIC,IAAD,IAAU;AAC1BX,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACH,GAFA;;AAGD,QAAMa,cAAc,GAAGxB,KAAK,CAACyB,UAAN,CAAiBC,GAAjB,CAAqB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC3D,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,MAAM,CAACJ,IAAZ,CAAH,CADJ;AAGH,GAJsB,CAAvB,CAtByB,CA6BzB;;AACA,QAAMM,cAAc,GAAG7B,KAAK,CAAC8B,iBAAN,CAAwBJ,GAAxB,CAA4B,CAACC,MAAD,EAASC,KAAT,KAAkB;AACjE,QAAG5B,KAAK,CAAC8B,iBAAN,CAAwBC,MAAxB,GAAgC,CAAnC,EAAqC;AACjC,0BACK,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEJ,MAAM,CAACxB,GAA1B;AACc,QAAA,GAAG,EAAEwB,MAAM,CAACvB,GAD1B;AAEc,QAAA,GAAG,EAAEwB,KAFnB;AAGc,QAAA,UAAU,EAAE5B,KAAK,CAACyB,UAAN,CAAiBG,KAAjB,CAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL;AAMC;AACJ,GATkB,CAAvB;AAUA,QAAMI,YAAY,GAAGhC,KAAK,CAACiC,eAAN,CAAsBP,GAAtB,CAA0B,CAACC,MAAD,EAASC,KAAT,KAAkB;AAC7D,QAAG5B,KAAK,CAACiC,eAAN,CAAsBF,MAAtB,GAA8B,CAAjC,EAAmC;AAC/B,0BACQ,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAEJ,MAAM,CAACxB,GAAxB;AACY,QAAA,GAAG,EAAEwB,MAAM,CAACvB,GADxB;AAEY,QAAA,GAAG,EAAEwB,KAFjB;AAGY,QAAA,QAAQ,EAAE5B,KAAK,CAACkC,QAAN,CAAeN,KAAf,CAHtB;AAIY,QAAA,UAAU,EAAEN,UAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADR;AAOC;AACJ,GAVgB,CAArB,CAxCyB,CAqDzB;;AACA,QAAMa,oBAAoB,GAAG,CAACC,KAAD,EAASC,MAAT,KAAkB;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B,EAAkCC,MAAlC;AACAnC,IAAAA,SAAS,CAAC;AAACC,MAAAA,GAAG,EAAEiC,KAAN;AAAahC,MAAAA,GAAG,EAAEiC;AAAlB,KAAD,CAAT;AACA7B,IAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,EAAmB;AAACJ,MAAAA,GAAG,EAAEiC,KAAN;AAAahC,MAAAA,GAAG,EAAEiC;AAAlB,KAAnB,CAAD,CAAhB;AACD,GAJH;;AAKA,QAAMG,cAAc,GAAG,CAACJ,KAAD,EAASC,MAAT,KAAkB;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B,EAAkCC,MAAlC;AACAnC,IAAAA,SAAS,CAAC;AAACC,MAAAA,GAAG,EAAEiC,KAAN;AAAahC,MAAAA,GAAG,EAAEiC;AAAlB,KAAD,CAAT;AACA3B,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiB;AAACN,MAAAA,GAAG,EAAEiC,KAAN;AAAahC,MAAAA,GAAG,EAAEiC;AAAlB,KAAjB,CAAD,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B9B,WAA5B;AACD,GALH;;AAOA,QAAMgC,mBAAmB,GAAGlC,aAAa,CAACmB,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT,KAAiB;AAC3D,QAAIc,MAAM,CAACC,IAAP,CAAYhB,MAAZ,EAAoBI,MAApB,KAA+B,CAAnC,EAAqC;AACpC,0BACI,yCADJ;AAMA,KAPD,MAOO;AACP,0BACI,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEJ,MAAM,CAACxB,GAA1B;AAA+B,QAAA,GAAG,EAAEwB,MAAM,CAACvB,GAA3C;AAAgD,QAAA,GAAG,EAAEwB,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGC;AACJ,GAb2B,CAA5B;AAcA,QAAMgB,iBAAiB,GAAGnC,WAAW,CAACiB,GAAZ,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAiB;AACvD,QAAIc,MAAM,CAACC,IAAP,CAAYhB,MAAZ,EAAoBI,MAApB,KAA+B,CAAnC,EAAqC;AACpC,0BACI,yCADJ;AAIA,KALD,MAKO;AACP,0BACI,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAEJ,MAAM,CAACxB,GAAxB;AAA6B,QAAA,GAAG,EAAEwB,MAAM,CAACvB,GAAzC;AAA8C,QAAA,GAAG,EAAEwB,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGC;AACJ,GAXyB,CAA1B;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjB,YAAY,iBACT;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKa,cADL,CADJ,CAFR,eAQI,oBAAC,UAAD;AAAY,IAAA,WAAW,EAAEW,oBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,eASI,oBAAC,QAAD;AAAU,IAAA,WAAW,EAAEK,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAWI,oBAAC,cAAD;AACA,IAAA,gBAAgB,EAAE;AAAEK,MAAAA,GAAG,EAAC;AAAN,KADlB;AAEA,IAAA,MAAM,EAAG5C,OAFT;AAGA,IAAA,WAAW,EAAEI,IAHb,CAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKwB,cANL,EAOKG,YAPL,EAQKS,mBARL,EASKG,iBATL,CAXJ,CADJ;AAyBH,CArHD;;AAuHI,eAAe7C,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport DriverMarker from \"./DriverMarker\"\nimport RideMarker from \"./RideMarker\"\nimport DriverForm from \"./DriverForm\"\nimport RideForm from \"./RideForm\"\nimport GoogleMapReact from 'google-map-react';\n\n\nconst SimpleMap = (props) => {\n    //setting state\n    const [centerC, setCenter] = useState({lat: 37.4275, lng: -122.1697});\n    const [zoom, setZoom] = useState(11);\n    const [driverAddress, setDriverAddress] = useState([])\n    const [rideAddress, setRideAddress] = useState([{}])\n    const [displayNames, setDisplayNames] = useState(false)\n  \n\n    const getMapOptions = () => {\n      return {\n        disableDefaultUI: true,\n        mapTypeControl: true,\n        streetViewControl: true,\n        styles: [{ featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'on' }] }],\n      };\n    };\n\n     //make showAllDrivers div and function\n     const assignPass = (name) => {\n        setDisplayNames(!displayNames)\n    }\n    const showAllDrivers = props.driverList.map((object, index) => {\n        return(\n            <a><li>{object.name}</li></a>\n        )\n    })\n\n     \n    //Pull in addresses from home and transfer into coordinates\n    const pullDriverData = props.driverCoordinates.map((object, index)=> {\n        if(props.driverCoordinates.length >0){\n            return (\n                 <DriverMarker lat={object.lat} \n                               lng={object.lng} \n                               key={index} \n                               driverList={props.driverList[index]}/>\n                )\n            }   \n        })\n    const pullRideData = props.rideCoordinates.map((object, index)=> {\n        if(props.rideCoordinates.length >0){\n            return (\n                    <RideMarker lat={object.lat} \n                                lng={object.lng} \n                                key={index} \n                                rideList={props.rideList[index]}\n                                assignPass={assignPass}/>\n                )\n            }  \n        })\n\n\n    //setting coordinates\n    const setDriverCoordinates = (later , longer)=>{\n        console.log(\"coordinates\", later, longer)\n        setCenter({lat: later, lng: longer})\n        setDriverAddress([...driverAddress, {lat: later, lng: longer}])\n      } \n    const setCoordinates = (later , longer)=>{\n        console.log(\"coordinates\", later, longer)\n        setCenter({lat: later, lng: longer})\n        setRideAddress([...rideAddress, {lat: later, lng: longer}])\n        console.log(\"Ride Address\", rideAddress)\n      }\n\n    const createDriverMarkers = driverAddress.map((object, index)=>{\n        if (Object.keys(object).length === 0){\n         return (\n             <>\n\n             </>\n\n         )\n        } else {\n        return (\n            <DriverMarker lat={object.lat} lng={object.lng} key={index}/>\n        )\n        }\n    })  \n    const createRideMarkers = rideAddress.map((object, index)=>{\n        if (Object.keys(object).length === 0){\n         return (\n             <>\n             </>\n         )\n        } else {\n        return (\n            <RideMarker lat={object.lat} lng={object.lng} key={index}/>\n        )\n        }\n    }) \n    return (\n        <div className=\"information\">\n            {displayNames && (\n                <div className=\"passengerList\">\n                    <ul>\n                        {showAllDrivers}\n                    </ul>\n                </div>\n                )} \n            <DriverForm coordinates={setDriverCoordinates}/>\n            <RideForm coordinates={setCoordinates} />\n            {/* <img src=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\" style={{ height: `92vh`, width: '100%' }}></img> */}\n            <GoogleMapReact\n            bootstrapURLKeys={{ key:'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y' }}\n            center= {centerC}\n            defaultZoom={zoom}\n            //   options = {getMapOptions}\n            > \n                {pullDriverData}\n                {pullRideData}\n                {createDriverMarkers}\n                {createRideMarkers}\n            </GoogleMapReact>\n        </div>\n    );\n}\n\n    export default SimpleMap"]},"metadata":{},"sourceType":"module"}