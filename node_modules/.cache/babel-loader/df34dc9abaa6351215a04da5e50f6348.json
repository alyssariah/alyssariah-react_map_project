{"ast":null,"code":"var _jsxFileName = \"/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js\";\nimport React, { useState } from 'react';\nimport \"./CSS/SimpleMap.css\";\nimport DriverMarker from \"./DriverMarker\";\nimport RideMarker from \"./RideMarker\";\nimport DriverForm from \"./DriverForm\";\nimport RideForm from \"./RideForm\";\nimport Plus from \"./Plus\";\nimport GoogleMapReact from 'google-map-react';\n\nconst SimpleMap = props => {\n  //setting state\n  const [centerC, setCenter] = useState({\n    lat: 37.4275,\n    lng: -122.1697\n  });\n  const [zoom, setZoom] = useState(11);\n  const [driverAddress, setDriverAddress] = useState([]);\n  const [rideAddress, setRideAddress] = useState([{}]);\n  const [currentPassenger, setCurrentPassenger] = useState(\"\");\n  const [displayNames, setDisplayNames] = useState(false);\n  const [selectDriver, setSelectDriver] = useState(\"\");\n\n  const getMapOptions = () => {\n    return {\n      disableDefaultUI: true,\n      mapTypeControl: true,\n      streetViewControl: true,\n      styles: [{\n        featureType: 'poi',\n        elementType: 'labels',\n        stylers: [{\n          visibility: 'on'\n        }]\n      }]\n    };\n  }; //assign to driver function\n\n\n  const assignToDriver = driverName => {\n    console.log(\"currentPassenger\", currentPassenger);\n    console.log(\"driverName\", driverName);\n    setDisplayNames(!displayNames);\n\n    for (let i = 0; i < props.assignDriver.length; i++) {\n      if (currentPassenger === props.assignDriver[i].passenger) {\n        props.assignDriver.splice(i, 1);\n      }\n    }\n\n    props.assignToDriver(driverName, currentPassenger);\n  };\n\n  const unassignDriver = () => {\n    setDisplayNames(!displayNames);\n\n    for (let i = 0; i < props.assignDriver.length; i++) {\n      if (currentPassenger === props.assignDriver[i].passenger) {\n        props.assignDriver.splice(i, 1);\n      }\n    }\n  }; //make showAllDrivers div and function\n\n\n  const assignPass = passengerName => {\n    for (let i = 0; i < props.assignDriver.length; i++) {\n      if (passengerName === props.assignDriver[i].passenger) {\n        setSelectDriver(props.assignDriver[i].driver);\n        console.log(\"new select driver\");\n      }\n    }\n\n    console.log(\"passengerName\", passengerName);\n    setCurrentPassenger(passengerName);\n    setDisplayNames(!props.displayNames);\n  };\n\n  const showAllDrivers = props.driverList.map((object, index) => {\n    return /*#__PURE__*/React.createElement(Plus, {\n      object: object,\n      assignToDriver: assignToDriver,\n      unassignDriver: unassignDriver,\n      assignDriver: props.assignDriver,\n      selectDriver: selectDriver,\n      setSelectDriver: setSelectDriver,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    });\n  }); //Pull in addresses from home and transfer into coordinates\n\n  const pullDriverData = props.driverList.map((object, index) => {\n    if (props.driverList.length > 0) {\n      return /*#__PURE__*/React.createElement(DriverMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        driverList: object,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 18\n        }\n      });\n    }\n  });\n  const pullRideData = props.rideList.map((object, index) => {\n    if (props.rideList.length > 0) {\n      return /*#__PURE__*/React.createElement(RideMarker, {\n        lat: object.lat,\n        lng: object.lng,\n        key: index,\n        rideList: object,\n        assignPass: assignPass,\n        assignDriver: props.assignDriver,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      });\n    }\n  }); //setting coordinates\n  // const setDriverCoordinates = (later , longer)=>{\n  //     console.log(\"coordinates\", later, longer)\n  //     setCenter({lat: later, lng: longer})\n  //     setDriverAddress([...driverAddress, {lat: later, lng: longer}])\n  //   } \n  // const setCoordinates = (later , longer)=>{\n  //     console.log(\"coordinates\", later, longer)\n  //     setCenter({lat: later, lng: longer})\n  //     setRideAddress([...rideAddress, {lat: later, lng: longer}])\n  //     console.log(\"Ride Address\", rideAddress)\n  //   }\n  // const createDriverMarkers = driverAddress.map((object, index)=>{\n  //     if (Object.keys(object).length === 0){\n  //      return (\n  //          <>\n  //          </>\n  //      )\n  //     } else {\n  //     return (\n  //         <DriverMarker lat={object.lat} lng={object.lng} key={index}/>\n  //     )\n  //     }\n  // })  \n  // const createRideMarkers = rideAddress.map((object, index)=>{\n  //     if (Object.keys(object).length === 0){\n  //      return (\n  //          <>\n  //          </>\n  //      )\n  //     } else {\n  //     return (\n  //         <RideMarker lat={object.lat} lng={object.lng} key={index}/>\n  //     )\n  //     }\n  // }) \n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, displayNames && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"allDrivers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"exit\",\n    onClick: () => {\n      setDisplayNames(!displayNames);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, showAllDrivers)), /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y'\n    },\n    center: centerC,\n    defaultZoom: zoom,\n    options: getMapOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, pullDriverData, pullRideData));\n};\n\nexport default SimpleMap;","map":{"version":3,"sources":["/Users/alyssajackson/Documents/React_App/seir-224-project-2/react_project/src/Components/SimpleMap.js"],"names":["React","useState","DriverMarker","RideMarker","DriverForm","RideForm","Plus","GoogleMapReact","SimpleMap","props","centerC","setCenter","lat","lng","zoom","setZoom","driverAddress","setDriverAddress","rideAddress","setRideAddress","currentPassenger","setCurrentPassenger","displayNames","setDisplayNames","selectDriver","setSelectDriver","getMapOptions","disableDefaultUI","mapTypeControl","streetViewControl","styles","featureType","elementType","stylers","visibility","assignToDriver","driverName","console","log","i","assignDriver","length","passenger","splice","unassignDriver","assignPass","passengerName","driver","showAllDrivers","driverList","map","object","index","pullDriverData","pullRideData","rideList","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./CSS/SimpleMap.css\"\nimport DriverMarker from \"./DriverMarker\"\nimport RideMarker from \"./RideMarker\"\nimport DriverForm from \"./DriverForm\"\nimport RideForm from \"./RideForm\"\nimport Plus from \"./Plus\"\nimport GoogleMapReact from 'google-map-react';\n\n\nconst SimpleMap = (props) => {\n    //setting state\n    const [centerC, setCenter] = useState({lat: 37.4275, lng: -122.1697});\n    const [zoom, setZoom] = useState(11);\n    const [driverAddress, setDriverAddress] = useState([])\n    const [rideAddress, setRideAddress] = useState([{}])\n    const [currentPassenger, setCurrentPassenger] = useState(\"\")\n    const [displayNames, setDisplayNames] = useState(false)\n    const [selectDriver, setSelectDriver] = useState(\"\")\n\n    const getMapOptions = () => {\n      return {\n        disableDefaultUI: true,\n        mapTypeControl: true,\n        streetViewControl: true,\n        styles: [{ featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'on' }] }],\n      };\n    };\n    \n    //assign to driver function\n    const assignToDriver = (driverName) => {\n        console.log(\"currentPassenger\", currentPassenger)\n        console.log(\"driverName\", driverName)\n        setDisplayNames(!displayNames)\n        for(let i= 0; i< props.assignDriver.length; i++){\n            if(currentPassenger === props.assignDriver[i].passenger){\n                props.assignDriver.splice(i, 1)\n            }\n        } \n        props.assignToDriver(driverName, currentPassenger)\n    }\n    const unassignDriver = () => {\n        setDisplayNames(!displayNames)\n        for(let i= 0; i< props.assignDriver.length; i++){\n            if(currentPassenger === props.assignDriver[i].passenger){\n                props.assignDriver.splice(i, 1)\n            }\n        } \n    }\n    //make showAllDrivers div and function\n     const assignPass = (passengerName) => {\n        for(let i= 0; i< props.assignDriver.length; i++){\n            if(passengerName === props.assignDriver[i].passenger){\n                setSelectDriver(props.assignDriver[i].driver)\n                console.log(\"new select driver\")\n            }\n        } \n        console.log(\"passengerName\", passengerName)\n        setCurrentPassenger(passengerName)\n        setDisplayNames(!props.displayNames)\n    }\n\n    const showAllDrivers = props.driverList.map((object, index) => {\n\n        return(\n            <Plus object={object} \n                  assignToDriver={assignToDriver} \n                  unassignDriver={unassignDriver}\n                  assignDriver = {props.assignDriver}\n                  selectDriver={selectDriver}\n                  setSelectDriver={setSelectDriver}/>    \n        )\n    })\n\n     \n    //Pull in addresses from home and transfer into coordinates\n    const pullDriverData = props.driverList.map((object, index)=> {\n        if(props.driverList.length >0){\n            return (\n                 <DriverMarker lat={object.lat} \n                               lng={object.lng} \n                               key={index} \n                               driverList={object}\n                               />\n                )\n            }   \n        })\n    const pullRideData = props.rideList.map((object, index)=> {\n        if(props.rideList.length >0){\n            return (\n                    <RideMarker lat={object.lat} \n                                lng={object.lng} \n                                key={index} \n                                rideList={object}\n                                assignPass={assignPass}\n                                assignDriver={props.assignDriver}/>\n                )\n            }  \n        })\n\n\n    //setting coordinates\n    // const setDriverCoordinates = (later , longer)=>{\n    //     console.log(\"coordinates\", later, longer)\n    //     setCenter({lat: later, lng: longer})\n    //     setDriverAddress([...driverAddress, {lat: later, lng: longer}])\n    //   } \n    // const setCoordinates = (later , longer)=>{\n    //     console.log(\"coordinates\", later, longer)\n    //     setCenter({lat: later, lng: longer})\n    //     setRideAddress([...rideAddress, {lat: later, lng: longer}])\n    //     console.log(\"Ride Address\", rideAddress)\n    //   }\n\n    // const createDriverMarkers = driverAddress.map((object, index)=>{\n    //     if (Object.keys(object).length === 0){\n    //      return (\n    //          <>\n\n    //          </>\n\n    //      )\n    //     } else {\n    //     return (\n    //         <DriverMarker lat={object.lat} lng={object.lng} key={index}/>\n    //     )\n    //     }\n    // })  \n    // const createRideMarkers = rideAddress.map((object, index)=>{\n    //     if (Object.keys(object).length === 0){\n    //      return (\n    //          <>\n    //          </>\n    //      )\n    //     } else {\n    //     return (\n    //         <RideMarker lat={object.lat} lng={object.lng} key={index}/>\n    //     )\n    //     }\n    // }) \n    return (\n        <div className=\"information\">\n            {displayNames && (\n                <div className=\"allDrivers\">\n                    <div className=\"exit\" onClick={()=>{setDisplayNames(!displayNames)}}>X</div>\n                    <ul>\n                        {showAllDrivers}\n                    </ul>\n                </div>\n                )} \n            {/* <DriverForm coordinates={setDriverCoordinates}/>\n            <RideForm coordinates={setCoordinates} /> */}\n            {/* <img src=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\" style={{ height: `92vh`, width: '100%' }}></img> */}\n            <GoogleMapReact\n            bootstrapURLKeys={{ key:'AIzaSyDJ56l2Y_6K3vN5rH30aKddRVljnEsuR_Y' }}\n            center= {centerC}\n            defaultZoom={zoom}\n            options = {getMapOptions}\n            > \n                {pullDriverData}\n                {pullRideData}\n                {/* {createDriverMarkers}\n                {createRideMarkers} */}\n            </GoogleMapReact>\n        </div>\n    );\n}\n\n    export default SimpleMap"]},"metadata":{},"sourceType":"module"}